package com.nd.dwebview.fragment;

import android.app.Application;
import android.content.Context;
import android.util.Log;

import com.nd.dwebview.facade.template.IJsApiCache;
import com.nd.dwebview.launcher.DWebViewLauncher;
import com.nd.dwebview.utils.ClassUtils;
import com.nd.dwebview.utils.Const;
import com.nd.dwebview.utils.PackageUtils;

import java.util.HashSet;
import java.util.Set;

/**
 * @author cwj
 * @date 2021/10/14 16:59
 */
public class JsApiInitHelper {

    private static Application sApplication;

    /**
     * 是否通过插件自动注册
     */
    private static boolean sRegisterByPlugin = false;


    public static Context getContext() {
        return sApplication;
    }

    private static void loadJsApiMap() {
        sRegisterByPlugin = false;
        // auto generate register code by gradle plugin: dwebview-auto-register
        // todo
    }

    public static void init(Application context) {
        sApplication = context;
        loadJsApiMap();
        if (sRegisterByPlugin) {
            //已经通过插件自动注册
            return;
        }
        //通过扫描Dex文件内容，匹配
        //耗时操作，建议放在工作线程
        try {
            long startInit = System.currentTimeMillis();
            Set<String> jsApiMap;
            // 版本更新或者debug
            if (DWebViewLauncher.debuggable() || PackageUtils.isNewVersion(context)) {
                Log.i(Const.TAG, "Run with debug mode or new install, rebuild router map.");
                // These class was generated by arouter-compiler.
                jsApiMap = ClassUtils.getFileNameByPackageName(context, Const.JSAPI_ROOT_PAKCAGE);
                if (!jsApiMap.isEmpty()) {
                    context.getSharedPreferences(Const.DWEBVIEW_SP_CACHE_KEY, Context.MODE_PRIVATE).edit().putStringSet(Const.DWEBVIEW_SP_KEY_MAP, jsApiMap).apply();
                }
                // Save new version name when router map update finishes.
                PackageUtils.updateVersion(context);
            } else {
                Log.i(Const.TAG, "Load router map from cache.");
                jsApiMap = new HashSet<>(context.getSharedPreferences(Const.DWEBVIEW_SP_CACHE_KEY, Context.MODE_PRIVATE).getStringSet(Const.DWEBVIEW_SP_KEY_MAP, new HashSet<String>()));
            }
            //依次调用loadInfo
            for (String className : jsApiMap) {
                ((IJsApiCache) (Class.forName(className).getConstructor().newInstance())).loadInto(Warehouse.JSAPI_ATLAS);
            }
            Log.i(Const.TAG, "Load root element finished, cost " + (System.currentTimeMillis() - startInit) + " ms.");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

}
